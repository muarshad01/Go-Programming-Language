# -------
79. Array
#--------

#----------------------------
80. Slice - composite literal
#----------------------------

We will use a COMPOSITE LITERAL to create a slice. 

A composite literal is created by having the TYPE followed by CURLY BRACES and then putting the appropriate values in the curly brace area.
code

code: https://play.golang.org/p/XtUEPJFgqD

# -------------------
81. Slice - for range
#--------------------

code: https://play.golang.org/p/O7cCALNFsH

# ------------------------
82. Slice - slicing a dice
# ------------------------

code: https://play.golang.org/p/AXGTEEn92M

# --------------------------
83. Slice - append to a slice
# ---------------------------

code: https://play.golang.org/p/oQnjP5Ka3F

# -------------------------------
84. Slice - deleting from a slice
# -------------------------------

We can delete from a slice using both append and slicing. This is a wonderful and elegant
example of why Go is great and how Go provides ease of programming.

code: https://play.golang.org/p/VTZ2Bof6bN

# --------------
85. Slice - make
# --------------

# ---------------------------------
86. Slice - multi-dimensional slice
# ---------------------------------

Slices are built on top of arrays. A slice is dynamic in that it will grow in size. 
The underlying array, however, does not grow in size. When we create a slice, we can use the built in function make to specify how large our slice should be and also how large the underlying array should be. This can enhance performance a little bit.

-- make([]T, length, capacity)
-- make([]int, 50, 100)

code: https://play.golang.org/p/07hH1b-hvD

# --------------------
87. Map - introduction
# --------------------

code: https://play.golang.org/p/TJajJyrUo5

# -----------------------------
88. Map - add element & range
# -----------------------------

code: https://play.golang.org/p/RTuBRiW087

# --------------
89. Map - delete
# --------------

code: https://play.golang.org/p/t5g_-8wgOL
