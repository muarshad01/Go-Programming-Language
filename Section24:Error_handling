# ----------------
178. Understanding
# ----------------

// "error" in Go is an interface.
type error interface {
	Error() string
}


package errors

// New returns an error that formats as the given text.
// Each call to New returns a distinct error value even if the text is identical.
func New(text string) error {
	return &errorString{text}
}

// errorString is a trivial implementation of error.
type errorString struct {
	s string
}

// Any other type that implements "Error() string" is also of type "error" in Go.
func (e *errorString) Error() string {
	return e.s
}

# ------------------
179. Checking errors
# ------------------

code: https://go.dev/play/p/flMiN9rZtnC
code: https://go.dev/play/p/SHxi-AdsJT9
code: https://go.dev/play/p/fSqQ0Q1uLhu
code: https://go.dev/play/p/NdQkbOK909r

# -----------------------
180. Printing and logging
# -----------------------

1. fmt.Println() -- stdout 
2. log.Println() -- default stdout but can also go to a logfile
3. log.Fatalln() -- os.Exit(); deferred functions are not run; exit status 1 
4. log.Panicln() -- deferred functions run; can use “recover” 
5. panic() -- deferred function run

code: https://go.dev/play/p/y_ozMejQuBD
code: https://go.dev/play/p/u9bXYTxWod7


# ----------
181. Recover
# ----------

blog: https://blog.golang.org/defer-panic-and-recover

code: https://play.golang.org/p/HI4uG55ait
code: https://play.golang.org/p/ZocncqtwaK

# -------------------
182. Errors with info
# -------------------

1. errors.New()
2. fmt.Errorf()
3. builtin.error


