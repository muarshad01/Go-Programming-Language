# ---------
109. Syntax
# ---------

func (r receiver) identifier(parameters) (return(s)) { ... }

Parameters and arguments
-- we define our func with parameters (if any)
-- we call our func and pass in arguments (in any)

Everything in Go is PASS BY VALUE (Nothing is PASS BY COPY or PASS BY REFERENCE)

purpose of functions
-- abstract code
-- code reusability

code:
-- basic func:        https://play.golang.org/p/Ou7esJnAkv
-- takes an argument: https://play.golang.org/p/dpINmrlSsQ
-- return:            https://play.golang.org/p/eh2Aud2jyr
-- multiple returns:  https://play.golang.org/p/7Xl9uVH2pO

# ---------------------
110. Variadic parameter
# ---------------------

// func (r receiver) identifier(parameter(s)) (return(s)) { ... }

You can create a func which takes an unlimited number of arguments. When you do this,
this is known as a “variadic parameter.” We use the lexical element operator “...T” to signify a variadic parameter (there “T” represents some type).

code: https://play.golang.org/p/Yi0FsQ2tKq

# --------------------
111. Unfurling a slice
# --------------------

When you have a slice of some type, you can pass in the individual values in a slice by
using the “...” operator.

code:
-- unfurling a slice of int: https://play.golang.org/p/T-mm6-SH71
-- passing in zero or more values: https://play.golang.org/p/Qc5sq_AK_T
-- variadic parameter has to be the final parameter: https://play.golang.org/p/euQ8PDQ8RN

# --------
112. Defer
# --------

A "defer" statement invokes a function whose execution is deferred to the moment
the surrounding function returns, either because the surrounding function executed a return statement, 
reached the end of its function body, or because the corresponding goroutine is "panicking".

code: https://play.golang.org/p/AYY3AN4LQ6

# ----------
113. Methods
# ----------

A method is nothing more than a FUNC attached to a TYPE. When you attach a func to a
type it is a method of that type. You attach a func to a type with a RECEIVER.

code: https://play.golang.org/p/HIBt2HHiIm

# -----------------
115. Anonymous func
# -----------------

Anonymous self-executing func

func(){
	...
}()

func(x int){
	...
}(42)

code: https://play.golang.org/p/54U7XWrNwZ

# ------------------
116. func expression
# ------------------

Assigning a func to a variable

code: https://play.golang.org/p/2ekrbY9SAm

# -------------------
117. Returning a func
# -------------------

# -----------
118. Callback
# -----------

# ----------
119. Closure
# ----------

# ------------
120. Recursion
# ------------
