# ===================================
# Section4: Variables, values, & type
# ===================================

# ------------
27. Playground
# ------------

# -------------
28. Hello world
# -------------

1. package main
2. func main

code: https://go.dev/play/p/v3rrZLwEUC

package main

import (
	"fmt"
)

func main() {
	fmt.Println("Hello, playground")
}

# --------------------------
29. Introduction to packages
# --------------------------

the "...<some type>" is how we signify a "variadic parameter".
	The type "interface{}" is the empty interface. 
	Every value is also of type "interface{}"
	So, the parameter "...interface{}" means "give me as many arguments of any type as you'd like".

use the "_" underscore character to "throw away returns". 
	You can't have "unused" variables in your code. 
	This is "code pollution".
	The compiler doesn't allow it.

func Println(a ...interface{}) (n int, err error)
func Println(a ...any) (n int, err error) 			# type any = interface{}

code: https://play.golang.org/p/30rOKO3qT8s

package main

import (
	"fmt"
)

func main() {
	n, _ := fmt.Println("Hello, playground", 42, true)
	fmt.Println(n)
}

# ----------------------------
30. Short declaration operator
# ----------------------------


31. The var keyword
#------------------
#

32. Exploring type
# ----------------
#

33. Zero value
# ------------
#

34. The fmt package
# -----------------
#

35. Creating your own type
# ------------------------
#

36. Conversion, not casting
# -------------------------
#
